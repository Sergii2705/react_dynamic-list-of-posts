{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPostID","setSelectedPostID","setHasNewCommentForm","setHasErrComments","className","map","id","title","type","cn","onClick","Loader","NewCommentForm","isAddingComment","addNewComment","useState","name","setName","email","setEmail","body","setBody","errName","setErrName","errEmail","seErrtEmail","errBody","setErrBody","onSubmit","event","preventDefault","handleAddNewComment","htmlFor","placeholder","value","onChange","target","PostDetails","selectedPost","comments","isLoadingComments","hasErrComments","removeComment","hasNewCommentForm","MainSection","length","comment","href","UserSelector","users","selectedUserID","setSelectedUserID","isOpen","setIsOpen","selectedUser","useMemo","find","prevIsOpen","role","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","App","setUsers","setPosts","isLoadingPosts","setIsLoadingPosts","hasErrPosts","setHasErrPosts","setComments","setIsLoadingComments","setIsAddingComment","useEffect","catch","finally","useCallback","commentID","prevComments","filter","postId","res","Error","post","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04b72184.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[],\n  selectedPostID: number,\n  setSelectedPostID: (id: number) => void,\n  setHasNewCommentForm: (has: boolean) => void\n  setHasErrComments: (has: boolean) => void\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostID,\n  setSelectedPostID,\n  setHasNewCommentForm,\n  setHasErrComments,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(({ id, title }) => (\n          <tr data-cy=\"Post\" key={id}>\n            <td data-cy=\"PostId\">{id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={cn('button is-link',\n                  { 'is-light': id !== selectedPostID })}\n                onClick={() => {\n                  setSelectedPostID(selectedPostID === id ? 0 : id);\n                  setHasErrComments(false);\n                  setHasNewCommentForm(false);\n                }}\n              >\n                {id === selectedPostID ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ninterface Props {\n  isAddingComment: boolean;\n  addNewComment: (data: CommentData) => void,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  isAddingComment,\n  addNewComment,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [errName, setErrName] = useState(false);\n  const [errEmail, seErrtEmail] = useState(false);\n  const [errBody, setErrBody] = useState(false);\n\n  const handleAddNewComment = () => {\n    if (!name || !email || !body) {\n      setErrName(name === '');\n      seErrtEmail(email === '');\n      setErrBody(body === '');\n\n      return;\n    }\n\n    addNewComment({ name, email, body });\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        if (!isAddingComment) {\n          handleAddNewComment();\n        }\n      }}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': errName })}\n            value={name}\n            onChange={(({ target }) => {\n              setName(target.value);\n              setErrName(false);\n            })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': errEmail })}\n            value={email}\n            onChange={(({ target }) => {\n              setEmail(target.value);\n              seErrtEmail(false);\n            })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', { 'is-danger': errBody })}\n            value={body}\n            onChange={(({ target }) => {\n              setBody(target.value);\n              setErrBody(false);\n            })}\n          />\n        </div>\n        {errBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', { 'is-loading': isAddingComment })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => {\n              setName('');\n              setErrName(false);\n              setEmail('');\n              seErrtEmail(false);\n              setBody('');\n              setErrBody(false);\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ninterface Props {\n  selectedPost: Post,\n  comments: Comment[],\n  isLoadingComments: boolean,\n  hasErrComments: boolean,\n  removeComment: (commentID: number) => void,\n  hasNewCommentForm: boolean,\n  setHasNewCommentForm: (has: boolean) => void,\n  isAddingComment: boolean,\n  addNewComment: (data: CommentData) => void,\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  comments,\n  isLoadingComments,\n  hasErrComments,\n  removeComment,\n  hasNewCommentForm,\n  setHasNewCommentForm,\n  isAddingComment,\n  addNewComment,\n}) => {\n  const { id, title, body } = selectedPost;\n\n  const MainSection = () => {\n    if (isLoadingComments) {\n      return (<Loader />);\n    }\n\n    if (hasErrComments) {\n      return (\n        <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n          Something went wrong\n        </div>\n      );\n    }\n\n    if (!comments.length) {\n      return (\n        <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n          No comments yet\n        </p>\n      );\n    }\n\n    return (\n      <>\n        <p className=\"title is-4\">Comments:</p>\n\n        {comments.map(comment => (\n          <article\n            className=\"message is-small\"\n            data-cy=\"Comment\"\n            key={comment.id}\n          >\n            <div className=\"message-header\">\n              <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                {comment.name}\n              </a>\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n                onClick={() => removeComment(comment.id)}\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              {comment.body}\n            </div>\n          </article>\n        ))}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            { body }\n          </p>\n        </div>\n\n        <div className=\"block\">\n          <MainSection />\n\n          {!hasNewCommentForm && !hasErrComments && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setHasNewCommentForm(true)}\n            >\n              Write a comment\n            </button>\n\n          )}\n\n        </div>\n\n        {hasNewCommentForm && !hasErrComments && (\n          <NewCommentForm\n            isAddingComment={isAddingComment}\n            addNewComment={addNewComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ninterface Props {\n  users: User[],\n  selectedUserID: number,\n  setSelectedUserID: (id: number) => void,\n  setSelectedPostID: (id: number) => void,\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUserID,\n  setSelectedUserID,\n  setSelectedPostID,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const selectedUser = useMemo(\n    () => users.find(({ id }) => id === selectedUserID),\n    [selectedUserID, users],\n  );\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsOpen(prevIsOpen => !prevIsOpen)}\n        >\n          <span>\n            {selectedUserID ? selectedUser?.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(({ id, name }) => (\n              <a\n                key={id}\n                href={`#user-${id}`}\n                className={cn(\n                  'dropdown-item', { 'is-active': id === selectedUserID },\n                )}\n                onClick={() => {\n                  setSelectedUserID(id);\n                  setSelectedPostID(0);\n                  setIsOpen(false);\n                }}\n              >\n                {name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { Comment, CommentData } from './types/Comment';\nimport { client } from './utils/fetchClient';\nimport { Post } from './types/Post';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserID, setSelectedUserID] = useState(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [hasErrPosts, setHasErrPosts] = useState(false);\n  const [selectedPostID, setSelectedPostID] = useState(0);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [hasErrComments, setHasErrComments] = useState(false);\n  const [hasNewCommentForm, setHasNewCommentForm] = useState(false);\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  useEffect(() => {\n    client.get<User[]>('/users')\n      .then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    if (selectedUserID) {\n      setHasErrPosts(false);\n      setIsLoadingPosts(true);\n      client.get<Post[]>(`/posts?userId=${selectedUserID}`)\n        .then(setPosts)\n        .catch(() => setHasErrPosts(true))\n        .finally(() => setIsLoadingPosts(false));\n    }\n  }, [selectedUserID]);\n\n  const MainSection = () => {\n    if (!selectedUserID) {\n      return (\n        <p data-cy=\"NoSelectedUser\">\n          No user selected\n        </p>\n      );\n    }\n\n    if (isLoadingPosts) {\n      return (\n        <Loader />\n      );\n    }\n\n    if (hasErrPosts) {\n      return (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"PostsLoadingError\"\n        >\n          Something went wrong!\n        </div>\n      );\n    }\n\n    if (!posts.length) {\n      return (\n        <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n          No posts yet\n        </div>\n      );\n    }\n\n    return (\n      <PostsList\n        posts={posts}\n        selectedPostID={selectedPostID}\n        setSelectedPostID={setSelectedPostID}\n        setHasNewCommentForm={setHasNewCommentForm}\n        setHasErrComments={setHasErrComments}\n      />\n    );\n  };\n\n  useEffect(() => {\n    if (selectedPostID) {\n      setHasErrComments(false);\n      setIsLoadingComments(true);\n      client.get<Comment[]>(`/comments?postId=${selectedPostID}`)\n        .then(setComments)\n        .catch(() => setHasErrComments(true))\n        .finally(() => setIsLoadingComments(false));\n    }\n  }, [selectedPostID]);\n\n  const removeComment = useCallback((commentID: number) => {\n    setComments(\n      prevComments => prevComments.filter(({ id }) => id !== commentID),\n    );\n    client.delete(`/comments/${commentID}`);\n  }, []);\n\n  const addNewComment = useCallback((data: CommentData) => {\n    setIsAddingComment(true);\n    setComments(\n      prevComments => [\n        ...prevComments, { ...data, postId: selectedPostID, id: -1 },\n      ],\n    );\n    client.post<Comment>('/comments', { ...data, postId: selectedPostID })\n      .then((res) => {\n        if (!res) {\n          throw new Error();\n        }\n\n        setComments(\n          prevComments => [\n            ...prevComments.filter(({ id }) => id !== -1),\n            res,\n          ],\n        );\n      })\n      .catch(() => {\n        setComments(\n          prevComments => prevComments.filter(({ id }) => id !== -1),\n        );\n        setHasErrComments(true);\n      })\n      .finally(() => setIsAddingComment(false));\n  }, [selectedPostID]);\n\n  const selectedPost = useMemo(\n    () => posts.find(post => post.id === selectedPostID) as Post,\n    [posts, selectedPostID],\n  );\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUserID={selectedUserID}\n                  setSelectedUserID={setSelectedUserID}\n                  setSelectedPostID={setSelectedPostID}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                <MainSection />\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': !!selectedPostID },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              { !!selectedPostID && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  isLoadingComments={isLoadingComments}\n                  hasErrComments={hasErrComments}\n                  removeComment={removeComment}\n                  hasNewCommentForm={hasNewCommentForm}\n                  setHasNewCommentForm={setHasNewCommentForm}\n                  isAddingComment={isAddingComment}\n                  addNewComment={addNewComment}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}